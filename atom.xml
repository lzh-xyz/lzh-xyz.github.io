<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mostly_Harmless的碎碎念</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-20T02:08:40.132Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mostly_Harmless</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20231119_Sort</title>
    <link href="http://example.com/2023/11/19/20231119-Sort/"/>
    <id>http://example.com/2023/11/19/20231119-Sort/</id>
    <published>2023-11-19T15:09:59.000Z</published>
    <updated>2023-11-20T02:08:40.132Z</updated>
    
    <content type="html"><![CDATA[<p>写点排序算法的笔记：</p><h2 id="插入排序-InsertionSort-O-n-2"><a href="#插入排序-InsertionSort-O-n-2" class="headerlink" title="插入排序 InsertionSort O(n^2)"></a>插入排序 InsertionSort O(n^2)</h2><pre><code>void insertSort(int arr[], int begin, int end){    // int length = end - begin + 1;    for (int i = begin + 1; i &lt; end + 1; i++)    {        for (int j = i; j &gt; begin; j--)        {            if (arr[j] &lt; arr[j - 1])            {                swap(&amp;arr[j], &amp;arr[j - 1]);            }else            {                break;            }        }    }}</code></pre><p>插入排序的本质就是排个头，先把第一个固定住，然后看第二个，第二个要是比第一个矮，就swap一下。</p><p>然后看第三个，第三个有没有第二个矮，要是矮，swap，此时第三个变成了第二个，再判断一下它和第一个的关系…………</p><p>循环往复，最后就排序完毕了。</p><hr><h2 id="快速排序-QuickSort-O-nlogn"><a href="#快速排序-QuickSort-O-nlogn" class="headerlink" title="快速排序 QuickSort O(nlogn)"></a>快速排序 QuickSort O(nlogn)</h2><pre><code>void QuickSort(int array[], int low , int high){       if(low&lt;high){    int index = array[low];    int i = low;    int j = high;    while (i&lt;j)    {        while (i&lt;j &amp;&amp; array[j] &gt;= index)        {            j--;        }        if (i&lt;j)        {            swap(&amp;array[i], &amp;array[j]);            i++;        }        while (i&lt;j &amp;&amp; array[i]&lt;index)        {            i++;        }        if(i&lt;j)        {            swap(&amp;array[i], &amp;array[j]);            j--;        }     }    array[i] = index;    QuickSort(array,low,i-1);    QuickSort(array,i+1,high);    }}</code></pre><p>快速排序是我接触的第一个排序算法，也是第一个利用到了分治和递归思想的算法。</p><p>说大白话就是<strong>分堆</strong>，我们先选一个“标准/标杆”(index), 这里我直接选的是第一项，然后我们把所有小于index的元素，都swap到index左边，大于index的元素都swap到右边。这样我们就获得了两堆数。之后对着这两堆数进行递归操作，反复的分堆分堆，分到什么时候呢？分到每个堆只有一个数字了，这也就意味着我们分完了。</p><p>在分堆的过程也是有讲究的，我们从数组的两端向中间移动。</p><pre><code>while (i&lt;j &amp;&amp; array[j] &gt;= index){    j--;}if (i&lt;j) // 这个判断就是防止因为i &gt;= j导致while终止，误操作swap，下面的if也是同理{    swap(&amp;array[i], &amp;array[j]);    i++; // 注意这个i++；}</code></pre><p>上面这段就是从最右端往左走，大的我们就留下，一旦发现小的，我们就直接swap到左边，同时从左边swap一个数字过来。可能你想问，如果我们swap过来的那个数字也小于index，应该放在左边怎么办呢？不急，我们接着往下看。</p><pre><code>while (i&lt;j &amp;&amp; array[i]&lt;index){    i++;}if(i&lt;j){    swap(&amp;array[i], &amp;array[j]);    j--;} </code></pre><p>这段开始我们从左端往右走，和上面的同理，小的我们留下，一旦发现大的，我们直接swap到右边，同时从右边swap一个数字过来。这个疑问又出现了，我们如果swap了一个大于index数字过来怎么办？</p><p>还好，循环会解决这些疑问。</p><p>当你进入下一轮最外层的while循环时，我们首先就会判断上一轮swap过来的**array [ j ]**满不满足我们的需求，如果不满足，果断扔回去。第二个也是同理。</p><p>就这样，不断的把数字扔来扔去，我们就得到了一个排好序的数组。</p><hr><h2 id="并归排序-mergeSort-O-nlogn"><a href="#并归排序-mergeSort-O-nlogn" class="headerlink" title="并归排序 mergeSort O(nlogn)"></a>并归排序 mergeSort O(nlogn)</h2><pre><code>void merge(int arr[], int left, int mid, int right){    int i, j, k;    int l = mid - left + 1;    int r = right - mid;    // 创建两个临时数组 L/R    int *L = (int *)malloc(l * sizeof(int));    int *R = (int *)malloc(r * sizeof(int));    // 把数字放进去    for (i = 0; i &lt; l; i++)    {        L[i] = arr[left + i];    }    for (j = 0; j &lt; r; j++)    {        R[j] = arr[mid + 1 + j];    }    // 开始分吧    i = 0;    j = 0;    k = left; // 众神归位    while (i &lt; l &amp;&amp; j &lt; r)    {        if (L[i] &lt;= R[j])        {            arr[k] = L[i];            i++;        }        else        {            arr[k] = R[j];            j++;        }        k++;    }    // 把剩下的元素处理干净    while (i &lt; l)    {        arr[k] = L[i];        i++;        k++;    }    while (j &lt; r)    {        arr[k] = R[j];        j++;        k++;    }    // free一下，养成好习惯    free(L);    free(R);}void mergeSort(int arr[], int left, int right){    if (left &lt; right) // 啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，不要忘了比较这个啊啊啊啊啊啊啊啊啊啊啊啊啊啊    {        int mid = left + (right - left) / 2;        mergeSort(arr, left, mid);        mergeSort(arr, mid + 1, right);        merge(arr, left, mid, right);    }}</code></pre><p>并归排序的实质，在我理解看来就是局部的有序，然后进行整合。我们通过递归，获得了大量的size为2(或1)的有序的子数组，然后我们选两个，因为在他们内部已经有序了，所以我们比第一个数字的大小，谁大谁放第一个…………就这样，两个有序数组合并成了一个大的有序数组，最终实现了排序。</p><p>先写到这里，未完待续</p><p>Mostly_Harmless</p><p>写于2023.11.20 上午十时</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写点排序算法的笔记：&lt;/p&gt;
&lt;h2 id=&quot;插入排序-InsertionSort-O-n-2&quot;&gt;&lt;a href=&quot;#插入排序-InsertionSort-O-n-2&quot; class=&quot;headerlink&quot; title=&quot;插入排序 InsertionSort O(n^2)&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>20231117_指针，地址，字符串</title>
    <link href="http://example.com/2023/11/17/20231117-Notes/"/>
    <id>http://example.com/2023/11/17/20231117-Notes/</id>
    <published>2023-11-17T00:19:16.000Z</published>
    <updated>2023-11-17T06:55:47.797Z</updated>
    
    <content type="html"><![CDATA[<p>写一下CS50学习过程中关于指针和地址部分的笔记和心得，其实就是在下面的注释部分，但是还是整理一下。</p><pre><code>#include &lt;stdio.h&gt;#include &lt;cs50.h&gt;int main(void){    int n = 50;    char *s = "HI!";    int *p = &amp;n; // p 是一个 指向int类型变量 的地址 的 整数 8 bytes    // p 用来存储地址    printf("%i\n", n);    printf("%p\n", p); // %p 获取地址 &amp;n    // p 存储 n的位置 OR p 指向 n的位置    printf("%i\n", *p);    // 打印 p所指向的那个东西，De-reference 解引用=    printf("%p\n", s);    printf("%s\n", s);    // %s (String) 不仅仅是打印了个变量值，更是根据你提供的地址找到了TA！    // 这块一定要理解好，printf不需要找到*s,他只需要找到s，也就是这个字符串的第一位(s[0])开始的地方，然后遍历到\0就可以了，所以    // 我们这里没有写 *s，而是直接s。因为*s对应的就是s[0]这么一个单字母了，我们不需要这个    printf("%s\n", s + 1);    // s + 1 就是将起始位置向后移动了一位，于是只会打印出 “I!”    printf("%c %c\n", s[0], *(s + 0));    // %c 打印 *s 的字符 就是相当于s[0]，因为s指向的就是这个字符串起始位置，也就是H所在的位置    printf("%c %c\n", s[1], *(s + 1));    printf("%c %c\n", s[2], *(s + 2));    // 其实类似于 s[i] 的这种 “语法糖” ，在编译时是这样处理的：    // s[i] --&gt; *(s + i)    // 不用在乎数据类型的问题，编译器会自动为你换算    // 所以让我们做点禁忌的事情    // printf("%c\n", *(s + 20000));    // Segmentation fault (core dumped)    // 访问了不该访问的内存    // strcmp 做了个什么事情呢？    // 比如 s, t 是两个strings    // 我们怎么判断他们是否相等？    // i form 1 to n 判断 *(s + i) ?= *(t + i)    // strcmp(s, t) 就是帮你干了这么件事情    // 若是相同的，return 0;    // 若是字典序 s &gt; t, return 1;    // 若是字典序 s &lt; t, return -1;    string m = get_string("m: ");    string t = get_string("t: ");    printf("%p\n", m);    printf("%p\n", t);}</code></pre><p>其实指针部分的主要问题就是C语言对于 * 这个符号的“滥用”。</p><p>1.int *p = &amp;n;<br>此时*的作用是<strong>定义指针</strong>，p 是一个<strong>指向int类型变量的地址</strong>的<strong>整数</strong>，大小为8 bytes。</p><p>p 可以理解为存储了<strong>n的位置</strong>，你知道p，也就能找到n，并且n在内存中的位置是确定的，尽管n的数值会改变，但是这个变量所在的位置是在其被定义的那个时候就确定了。</p><p>2.printf(“%i\n”, *p);<br>此时*的作用就是<strong>De-reference 解引用指针</strong>，寻找到p对应的那个“东西”。</p><hr><p>剩下的就是一些细枝末节的东西，例如：</p><p>%p就是打印p所指向的<strong>地址</strong><br>e.g:printf(“%p\n”, p); 输出的就是0x16b6c710c，也就是n所在的地址。</p><p>对于字符串 (char数组) 而言，printf中的%s，你只需要提供你想要打印的起始位置，printf函数会自动替你完成“<strong>往下走，直到\0</strong>”的步骤。</p><p>e.g:</p><pre><code>char *s = "HI!";printf("%p\n", s); // out:0x16ae1f108printf("%s\n", s); // out:HI! printf("%s\n", s + 1); // out:I!</code></pre><p>我们这里没有写 *s，而是直接写s。因为*s对应的就是s[0]所对应的这么一个单字母(H)了，我们不需要这个，我们需要的是起始位置，也就是起始的地址。</p><p>类似于 s[i] 的这种 “语法糖” ，在编译时是这样处理的：<strong>s[i] –&gt; *(s + i)</strong><br>不用担心，编译器会为你做好一切，这类语法🍬还是很好用的。</p><hr><p>来点<strong>禁忌</strong>的事情</p><p>比如我们写这么一个东西</p><pre><code>printf("%c\n", *(s + 200000));</code></pre><p>我们想访问一下 s后200000位内存存着些什么，但是运行的时候就是**Segmentation fault (core dumped)**，你访问了（我访问了/计算机访问了）不该访问的内存。</p><hr><p>我们再围绕字符串写一点点东西，比如<strong>strings.h</strong>库中的<strong>strcmp</strong>函数，它的实现原理就是：输入s, t两个strings。然后开始判断 *(s + i) ?= *(t + i)，其中i从0到n遍历。</p><p>若是相同的，return 0;<br>若是字典序 s &gt; t, return 1;<br>若是字典序 s &lt; t, return -1;</p><p>Mostly_Harmless</p><p>写于2023.11.16 下午二时</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写一下CS50学习过程中关于指针和地址部分的笔记和心得，其实就是在下面的注释部分，但是还是整理一下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;cs50.h&amp;gt;

int main(void)
{
    </summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>20231024_近期计划</title>
    <link href="http://example.com/2023/10/24/20231024-%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92/"/>
    <id>http://example.com/2023/10/24/20231024-%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92/</id>
    <published>2023-10-24T15:43:39.000Z</published>
    <updated>2023-11-15T16:32:28.871Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=2005470573&amp;auto=0&amp;height=66"></iframe><p>好久没写博客了，今天线代出分 11/15。其实随着这两天看一些东西，包括进行一些自己的简单思考，也逐渐把大学的一个方向定了下来。</p><h1 id="近期计划"><a href="#近期计划" class="headerlink" title="近期计划"></a>近期计划</h1><p>先讲讲近期计划吧，我已经把Markdown语法忘的差不多了，所以我现在去复习一下markdown语法。</p><p>复习的差不多了，突然想到，按照惯例，我应该在开头放一首歌的。妈的，好多网易云的歌曲由于VIP不能生成外联播放器了，First Love！</p><p>目前第一学期主要是三门课: </p><ol><li>工科数学分析 // 微积分</li><li>线性代数 // 代数与几何</li><li>程序设计 // C语言</li></ol><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><p>为什么先从它说起呢？因为这个小家伙在开学初期，甚至是整个9月份，极大的拖慢了我的学习进度。当然，肯定不是这门课的问题，而是我太久没<strong>学习</strong>，以至于失去了自己的<strong>学习节奏</strong>的问题。</p><p>我首先选中了Strang讲授的MIT 18.06课程，但是犯了一个大毛病：</p><blockquote><p>只听课，不记笔记；<br>只看视频，不写题；<br>只顾赶进度，忘记了质量；<br>听课的时候注意力极度不集中，经常一整手机就拿起来了，外加 <strong>倍速和非母语</strong> 这两个DeBuff的加持下，听课效果大打折扣。</p></blockquote><p>当然，我也很快的意识到这个情况，并且采取了补救措施：</p><blockquote><p>直接重开，从lecture1开始听，边听边记笔记；<br>重听的过程中，降低倍速，刹下心来认真的去听讲。</p></blockquote><p>目前进度已经来到了lecture11结束，明天Review一下。一共是35个lectures，争取11月底结课。</p><hr><p>你以为只有这么点问题？如果真的只有这么点，那也不会让我这么头大。</p><p>另一个深深困扰到我的问题就是：学校的课程编排与18.06完全不同，以及一些名词和概念的不尽相同，使得我脑瓜子嗡嗡的。</p><p>举个例子：我们学校的教材上来就是行列式，而Strang全程围绕着矩阵展开，行列式要等到极其靠后的位置才会展开。</p><p>后来我得解决方案是什么呢？那就是<strong>我全都要</strong>。</p><p>学校这边，作业+教材+习题册一把抓，外加一个B站up主<a href="https://space.bilibili.com/1896150601">@当年线代</a>，完美的将我的线代补完了。</p><p>但是由于当时的欠缺与延误，在某些细节的知识点处理上还是出现了些问题，外加刷题量不够，期中考试还是有些失误，但是不重要，区区15%。</p><p>那接下来要干些什么呢？</p><p>我把所有的TODO-list扔到了文章的结尾。</p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>之前在听 OLD_CS50 + 浙江大学翁恺教授 这两门C语言课，OLD_CS50由于实在太过古老，听了几讲就放弃了；而后者则听到了字符串。<strong>注意：这里我犯了和线代一样的问题，赶进度，没有巩固练习</strong>。</p><p>于是我就转头去打了洛谷。由于完成洛谷的题单也占我们这门课分数的一部分，所以也就做的乐此不疲。</p><p>但是做着做着发现问题了：虽然做题是一个很好的巩固知识点的方式，但是之前的知识太零碎了，不成体系，做题的时候就极其不爽，还总爆WA。再继续做下去的话，那就是为了做题而做题了，达不到锻炼能力的目的了。</p><p>外加上准备 数学分析和线性代数 两门课的期中考试，我在期中考试前暂停了洛谷的刷题。</p><p>期中考试后，偶然间发现了B站热心人士人工翻译的新版CS50，于是就开始：<strong>CS50，启动!</strong></p><p>目前做到了lecture4，不得不说，这个课程的Lab和Pest(Problem Set)的设计都很牛逼，除了英语这个障碍，我没什么好说的。</p><p>这门课程的C语言部分到Lecture5就结束了，这周末(2023/10/29)弄完之后，我就准备回到洛谷刷题+复习一下基本的东西(比如字符串、数组、指针……)</p><p>收拾收拾就得开始下一轮课程了</p><blockquote><p>你学了CS50，106x进行完前十集，就可以走起csapp了<br>学完106x，就可以走起MIT 6.006算法导论</p></blockquote><p>目前感觉尚可。</p><h2 id="工科数学分析"><a href="#工科数学分析" class="headerlink" title="工科数学分析"></a>工科数学分析</h2><p>从我把它扔到最后来讲你就知道我对这个课的感情。</p><p>先给结论：<strong>学的不好</strong></p><p>补救措施：<strong>认真的把教材/习题册/习题集上的题老老实实做一遍</strong></p><p>期中考试的分数一定不会很好看。是我的问题，老师讲的很好。</p><hr><p>我有点困了，想回宿舍睡觉了，淑芬的内容我明后天有时间再补充吧。</p><p>先把TODOList写了。</p><ul><li><input disabled="" type="checkbox"> MIT 18.06 DDL:2023/12/10</li><li><input disabled="" type="checkbox"> 线性代数100题 DDL:2023/12/20</li><li><input checked="" disabled="" type="checkbox"> CS50 Lecture5 DDL:2023/10/29</li><li><input checked="" disabled="" type="checkbox"> 洛谷入门题单 DDL:2023/12/7</li><li><input disabled="" type="checkbox"> 写几篇CS50有关的总结笔记并发在Blog上 DDL:2023/12/1</li><li><input disabled="" type="checkbox"> CS 106X DDL:2024/1/1</li><li><input disabled="" type="checkbox"> 微积分教材习题(追上进度) DDL:2023/11/30</li><li><input disabled="" type="checkbox"> 抢进度，抢进度，抢进度 DDL: NULL</li></ul><p>Mostly_Harmless</p><p>写于2023.10.25 凌晨一点 正心804</p><hr><p>UPDATE 20231116：</p><p>MIT 18.06 lecture15 锐意进行中；</p><p>CS50 Lecture5已经结束，但是Lab和pest还没有做；</p><p>微积分教材习题已经追到了 不定积分，目前课程进度是定积分部分；</p><p>DDL部分推迟。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;amp</summary>
      
    
    
    
    
    <category term="计划" scheme="http://example.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>20231011_新创世纪</title>
    <link href="http://example.com/2023/10/11/20231011-%E6%96%B0%E5%88%9B%E4%B8%96%E7%BA%AA/"/>
    <id>http://example.com/2023/10/11/20231011-%E6%96%B0%E5%88%9B%E4%B8%96%E7%BA%AA/</id>
    <published>2023-10-11T11:31:53.000Z</published>
    <updated>2023-10-11T11:33:04.373Z</updated>
    
    <content type="html"><![CDATA[<p>新创世纪</p><p>Hello，World！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新创世纪&lt;/p&gt;
&lt;p&gt;Hello，World！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
